{"version":3,"file":"events.es5.js","sources":["../src/lib/const.ts","../src/lib/utils.ts","../src/events.ts"],"sourcesContent":["// The EventEmitter instance will emit its own 'newListener'\n// event before a listener is added to its internal array of\n// listeners.\nexport const NEW_LISTENER = 'newListener';\n\n// The 'removeListener' event is emitted after the listener\n// is removed.\nexport const REMOVE_LISTENER = 'removeListener';\n\n// a maximum of 10 listeners can be registered for any single event\nexport const DEFAULT_MAX_LISTENER = 10;\n","'use strict'\nimport { EventName, ListenerFunction } from './interface'\nimport EventEmitter from '../events'\n\nexport function isValidListener(listener: Function) {\n  const isValid = isFunction(listener)\n  if (!isValid) {\n    throw new TypeError(`[events] the type of 'listener' is not valid`)\n  }\n  return isValid\n}\n\nexport function isValidEventName(eventName: EventName) {\n  const isValid = isString(eventName) || isSymbol(eventName)\n  if (!isValid) {\n    throw new TypeError(`[events] the type of 'eventName' is not valid`)\n  }\n  return isValid\n}\n\nexport function isString(val: any) {\n  return typeof val === 'string'\n}\n\nexport function isSymbol(val: any) {\n  return typeof val === 'symbol'\n}\n\nexport function isFunction(val: any) {\n  return typeof val === 'function'\n}\n\nexport function isPositiveNumber(val: any) {\n  return typeof val === 'number' && val >= 0\n}\n\nexport const isArray = Array.isArray\n\n/**\n * Finds the index of the listener for the event in its storage array.\n *\n * @param {Function[]} listeners Array of listeners to search through.\n * @param {Function} listener Method to look for.\n * @return {Number} Index of the specified listener, -1 if not found\n * @api private\n */\nexport function indexOfListener(listeners: ListenerFunction[], listener: Function): number {\n  let i = listeners.length\n  while (i--) {\n    if (listeners[i] && listeners[i].listener === listener) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport function createListenerFunction(\n  events: EventEmitter,\n  eventName: EventName,\n  listener: Function,\n  once = false\n) {\n  const listenerFunction: any = function(...args: any[]) {\n    if (once) {\n      events.removeListener(eventName, listener)\n    }\n    listener.apply(events, args)\n  }\n\n  listenerFunction.listener = listener\n  listenerFunction.once = once\n\n  return listenerFunction as ListenerFunction\n}\n","'use strict'\nimport { DEFAULT_MAX_LISTENER, NEW_LISTENER, REMOVE_LISTENER } from './lib/const'\nimport { EventName, Events, ListenerFunction } from './lib/interface'\nimport {\n  createListenerFunction,\n  indexOfListener,\n  isArray,\n  isPositiveNumber,\n  isValidEventName,\n  isValidListener\n} from './lib/utils'\n\n/**\n */\nexport default class EventEmitter {\n  private _events: Events = {}\n  private _maxListeners: number = DEFAULT_MAX_LISTENER\n  private defaultMaxListeners: number = DEFAULT_MAX_LISTENER\n\n  // /**\n  //  * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.\n  //  * @return {Function} Non conflicting EventEmitter class.\n  //  * TODO\n  //  */\n  // static noConflict(): Function {\n  //   return EventEmitter\n  // }\n\n  // get _eventsCount() {\n  //   return this.eventNames().length\n  // }\n\n  /**\n   * Returns the current max listener value for the EventEmitter\n   * which is either set by emitter.setMaxListeners(n) or defaults\n   * to EventEmitter.defaultMaxListeners.\n   * @return {number}\n   */\n  getMaxListeners(): number {\n    return this._maxListeners\n  }\n\n  /**\n   * By default EventEmitters will print a warning if more than 10\n   * listeners are added for a particular event. This is a useful\n   * default that helps finding memory leaks. Obviously, not all\n   * events should be limited to just 10 listeners.\n   * The emitter.setMaxListeners() method allows the limit to be\n   * modified for this specific EventEmitter instance. The value\n   * can be set to Infinity (or 0) to indicate an unlimited\n   * number of listeners.\n   * @param {number} maxListeners - The number of max listeners.\n   * @return {EventEmitter}\n   */\n  setMaxListeners(maxListeners: number): EventEmitter {\n    if (!isPositiveNumber(maxListeners)) {\n      throw new TypeError('[events] MaxListeners number must be a positive number!')\n    }\n\n    this._maxListeners = maxListeners\n\n    return this\n  }\n\n  /**\n   * Returns an array listing the events for which the emitter\n   * has registered listeners. The values in the array will be\n   * strings or Symbols.\n   * @param {EventName} eventName - The name of the event.\n   * @param {any[]} [...args] - arguments pass to event listener.\n   * @return {boolean} Returns true if the event had listeners, false otherwise.\n   */\n  emit(eventName: EventName, ...args: any[]): boolean {\n    const _events = this._getEvents()\n    if (_events.hasOwnProperty(eventName)) {\n      let listeners: ListenerFunction[] = _events[eventName].concat()\n      const hasListeners = listeners.length > 0\n\n      listeners.forEach(listenerFunction => listenerFunction.apply(this, args))\n\n      return hasListeners\n    }\n    return false\n  }\n\n  /**\n   * Returns an array listing the events for which the emitter\n   * has registered listeners. The values in the array will be\n   * strings or Symbols.\n   * @return {EventName[]}\n   */\n  eventNames(): EventName[] {\n    const _events = this._getEvents()\n    return Object.keys(_events) || []\n  }\n\n  /**\n   * Returns the number of listeners listening to the event named eventName.\n   * @param {EventName} eventName - The name of the event.\n   * @return {number}\n   */\n  listenerCount(eventName: EventName): number {\n    const _events = this._getEvents()\n    if (_events.hasOwnProperty(eventName) && isArray(_events[eventName])) {\n      return _events[eventName].length\n    }\n    return 0\n  }\n\n  /**\n   * Returns a copy of the array of listeners for the event named eventName.\n   * @param {EventName} eventName - The name of the event.\n   * @return {Function[]}\n   */\n  listeners(eventName: EventName): Function[] {\n    const _events = this._getEvents()\n    let _listeners: Function[] = []\n    if (_events.hasOwnProperty(eventName)) {\n      let _rawListeners = _events[eventName]\n      _rawListeners.forEach(item => {\n        _listeners.push(item.listener)\n      })\n    }\n    return _listeners\n  }\n\n  /**\n   * Returns a copy of the array of listeners for the event named eventName.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   */\n  addListener(eventName: EventName, listener: Function): EventEmitter {\n    return this._addListener(eventName, listener, false, false)\n  }\n\n  /**\n   * Returns a copy of the array of listeners for the event named eventName.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   */\n  on(eventName: EventName, listener: Function): EventEmitter {\n    return this._addListener(eventName, listener, false, false)\n  }\n\n  /**\n   * Adds a one-time listener function for the event named eventName.\n   * The next time eventName is triggered, this listener is removed\n   * and then invoked.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   */\n  once(eventName: EventName, listener: Function): EventEmitter {\n    return this._addListener(eventName, listener, true, false)\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array\n   * for the event named eventName. No checks are made to see if the\n   * listener has already been added. Multiple calls passing the same\n   * combination of eventName and listener will result in the listener\n   * being added, and called, multiple times.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   *\n   * @example\n   * server.prependListener('connection', (stream) => {\n   *      console.log('someone connected!');\n   * });\n   */\n  prependListener(eventName: EventName, listener: Function): EventEmitter {\n    return this._addListener(eventName, listener, false, true)\n  }\n\n  /**\n   * Adds a one-time listener function for the event named eventName to the\n   * beginning of the listeners array. The next time eventName is triggered,\n   * this listener is removed, and then invoked.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   */\n  prependOnceListener(eventName: EventName, listener: Function): EventEmitter {\n    return this._addListener(eventName, listener, true, true)\n  }\n\n  /**\n   * Removes all listeners, or those of the specified eventName.\n   * @param {EventName[]} eventNames - The names array of the event.\n   * @return {EventEmitter}\n   */\n  removeAllListeners(eventNames?: EventName[]): EventEmitter {\n    const _events = this._getEvents()\n    if (eventNames && isArray(eventNames) && eventNames.length > 0) {\n      // remove the specified eventName list\n      let i = 0\n      let len = eventNames.length\n      for (; len > i; i++) {\n        const _eventName = eventNames[i]\n        if (_events.hasOwnProperty(_eventName)) {\n          delete _events[_eventName]\n        }\n      }\n    } else {\n      // remove all\n      this._events = {}\n    }\n\n    // The 'removeListener' event is emitted after the listener is removed.\n    this.emit(REMOVE_LISTENER)\n\n    return this\n  }\n\n  /**\n   * Removes all listeners, or those of the specified eventName.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   */\n  removeListener(eventName: EventName, listener: Function): EventEmitter {\n    return this._removeListener(eventName, listener)\n  }\n\n  /**\n   * Removes all listeners, or those of the specified eventName.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   */\n  off(eventName: EventName, listener: Function): EventEmitter {\n    return this._removeListener(eventName, listener)\n  }\n\n  /**\n   * Returns a copy of the array of listeners for the event named\n   * eventName, including any wrappers (such as those created by .once).\n   * @param {EventName} eventName - The name of the event.\n   * @return {ListenerFunction[]}\n   */\n  rawListeners(eventName: EventName): ListenerFunction[] {\n    const _events = this._getEvents()\n    let _rawListeners: ListenerFunction[] = []\n    if (_events.hasOwnProperty(eventName)) {\n      _rawListeners = _events[eventName].concat()\n    }\n    return _rawListeners\n  }\n\n  /**\n   * 检查当前事件名是否超过设定的最大监听数\n   * @param {EventName} eventName - The name of the event.\n   * @return {boolean}\n   * @private\n   */\n  private _checkIfMatchMaxListener(eventName: EventName): boolean {\n    if (this._maxListeners === undefined || this._maxListeners === 0) return false\n\n    const _events = this._getEvents()\n    let _res = false\n\n    if (_events.hasOwnProperty(eventName) && isArray(_events[eventName])) {\n      const length = _events[eventName].length\n      _res = length > this._maxListeners\n      if (_res) {\n        /* istanbul ignore next */\n        throw new RangeError(`\n        [events] The current event ${eventName}(${length}) has exceeded the maximum \n        number of listeners(${this._maxListeners}), You need to be aware of the  \n        existence of possible EventEmitter memory leak!\n        `)\n      }\n    }\n\n    return _res\n  }\n\n  /**\n   * Removes all listeners, or those of the specified eventName.\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @return {EventEmitter}\n   */\n  private _removeListener(eventName: EventName, listener: Function): EventEmitter {\n    const _events = this._getEvents()\n    if (!_events.hasOwnProperty(eventName)) return this\n\n    const listeners = _events[eventName]\n\n    if (isArray(listeners) && listeners.length > 0) {\n      const index = indexOfListener(listeners, listener)\n      if (index !== -1) {\n        listeners.splice(index, 1)\n      }\n    }\n\n    if (!isArray(listeners) || listeners.length === 0) {\n      delete _events[eventName]\n    }\n\n    // The 'removeListener' event is emitted after the listener is removed.\n    this.emit(REMOVE_LISTENER)\n\n    return this\n  }\n\n  /**\n   * 添加监听\n   * @param {EventName} eventName - The name of the event.\n   * @param {Function} listener - The callback function\n   * @param {Boolean} [once=false] - once or not\n   * @param {Boolean} [prepend=false] - prepend or not\n   * @return {EventEmitter}\n   * @private\n   */\n  private _addListener(\n    eventName: EventName,\n    listener: Function,\n    once = false,\n    prepend = false\n  ): EventEmitter {\n    if (!isValidEventName(eventName) || !isValidListener(listener)) {\n      /* istanbul ignore next */\n      throw new TypeError(`[events] Invalid arguments of 'eventName' or 'listener'!`)\n    }\n\n    const _events = this._getEvents()\n\n    if (!_events.hasOwnProperty(eventName)) {\n      _events[eventName] = []\n    }\n\n    if (!isArray(_events[eventName])) {\n      /* istanbul ignore next */\n      throw new TypeError('[events] The events[eventName] must be array type!')\n    }\n\n    const prependMethod = prepend ? 'unshift' : 'push'\n\n    // emit \"NEW_LISTENER\" before added\n    if (NEW_LISTENER !== eventName) {\n      this.emit(NEW_LISTENER, eventName, listener)\n    }\n\n    _events[eventName][prependMethod](createListenerFunction(this, eventName, listener, once))\n\n    this._checkIfMatchMaxListener(eventName)\n\n    return this\n  }\n\n  /**\n   * Fetches the events object and creates one if required.\n   *\n   * @return {Events} The events storage object.\n   */\n  private _getEvents(): Events {\n    return this._events || (this._events = {})\n  }\n}\n"],"names":[],"mappings":"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"}