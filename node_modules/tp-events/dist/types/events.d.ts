import { EventName, ListenerFunction } from './lib/interface';
/**
 */
export default class EventEmitter {
    private _events;
    private _maxListeners;
    private defaultMaxListeners;
    /**
     * Returns the current max listener value for the EventEmitter
     * which is either set by emitter.setMaxListeners(n) or defaults
     * to EventEmitter.defaultMaxListeners.
     * @return {number}
     */
    getMaxListeners(): number;
    /**
     * By default EventEmitters will print a warning if more than 10
     * listeners are added for a particular event. This is a useful
     * default that helps finding memory leaks. Obviously, not all
     * events should be limited to just 10 listeners.
     * The emitter.setMaxListeners() method allows the limit to be
     * modified for this specific EventEmitter instance. The value
     * can be set to Infinity (or 0) to indicate an unlimited
     * number of listeners.
     * @param {number} maxListeners - The number of max listeners.
     * @return {EventEmitter}
     */
    setMaxListeners(maxListeners: number): EventEmitter;
    /**
     * Returns an array listing the events for which the emitter
     * has registered listeners. The values in the array will be
     * strings or Symbols.
     * @param {EventName} eventName - The name of the event.
     * @param {any[]} [...args] - arguments pass to event listener.
     * @return {boolean} Returns true if the event had listeners, false otherwise.
     */
    emit(eventName: EventName, ...args: any[]): boolean;
    /**
     * Returns an array listing the events for which the emitter
     * has registered listeners. The values in the array will be
     * strings or Symbols.
     * @return {EventName[]}
     */
    eventNames(): EventName[];
    /**
     * Returns the number of listeners listening to the event named eventName.
     * @param {EventName} eventName - The name of the event.
     * @return {number}
     */
    listenerCount(eventName: EventName): number;
    /**
     * Returns a copy of the array of listeners for the event named eventName.
     * @param {EventName} eventName - The name of the event.
     * @return {Function[]}
     */
    listeners(eventName: EventName): Function[];
    /**
     * Returns a copy of the array of listeners for the event named eventName.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     */
    addListener(eventName: EventName, listener: Function): EventEmitter;
    /**
     * Returns a copy of the array of listeners for the event named eventName.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     */
    on(eventName: EventName, listener: Function): EventEmitter;
    /**
     * Adds a one-time listener function for the event named eventName.
     * The next time eventName is triggered, this listener is removed
     * and then invoked.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     */
    once(eventName: EventName, listener: Function): EventEmitter;
    /**
     * Adds the listener function to the beginning of the listeners array
     * for the event named eventName. No checks are made to see if the
     * listener has already been added. Multiple calls passing the same
     * combination of eventName and listener will result in the listener
     * being added, and called, multiple times.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     *
     * @example
     * server.prependListener('connection', (stream) => {
     *      console.log('someone connected!');
     * });
     */
    prependListener(eventName: EventName, listener: Function): EventEmitter;
    /**
     * Adds a one-time listener function for the event named eventName to the
     * beginning of the listeners array. The next time eventName is triggered,
     * this listener is removed, and then invoked.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     */
    prependOnceListener(eventName: EventName, listener: Function): EventEmitter;
    /**
     * Removes all listeners, or those of the specified eventName.
     * @param {EventName[]} eventNames - The names array of the event.
     * @return {EventEmitter}
     */
    removeAllListeners(eventNames?: EventName[]): EventEmitter;
    /**
     * Removes all listeners, or those of the specified eventName.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     */
    removeListener(eventName: EventName, listener: Function): EventEmitter;
    /**
     * Removes all listeners, or those of the specified eventName.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     */
    off(eventName: EventName, listener: Function): EventEmitter;
    /**
     * Returns a copy of the array of listeners for the event named
     * eventName, including any wrappers (such as those created by .once).
     * @param {EventName} eventName - The name of the event.
     * @return {ListenerFunction[]}
     */
    rawListeners(eventName: EventName): ListenerFunction[];
    /**
     * 检查当前事件名是否超过设定的最大监听数
     * @param {EventName} eventName - The name of the event.
     * @return {boolean}
     * @private
     */
    private _checkIfMatchMaxListener(eventName);
    /**
     * Removes all listeners, or those of the specified eventName.
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @return {EventEmitter}
     */
    private _removeListener(eventName, listener);
    /**
     * 添加监听
     * @param {EventName} eventName - The name of the event.
     * @param {Function} listener - The callback function
     * @param {Boolean} [once=false] - once or not
     * @param {Boolean} [prepend=false] - prepend or not
     * @return {EventEmitter}
     * @private
     */
    private _addListener(eventName, listener, once?, prepend?);
    /**
     * Fetches the events object and creates one if required.
     *
     * @return {Events} The events storage object.
     */
    private _getEvents();
}
