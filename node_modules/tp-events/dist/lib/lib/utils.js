'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
function isValidListener(listener) {
    var isValid = isFunction(listener);
    if (!isValid) {
        throw new TypeError("[events] the type of 'listener' is not valid");
    }
    return isValid;
}
exports.isValidListener = isValidListener;
function isValidEventName(eventName) {
    var isValid = isString(eventName) || isSymbol(eventName);
    if (!isValid) {
        throw new TypeError("[events] the type of 'eventName' is not valid");
    }
    return isValid;
}
exports.isValidEventName = isValidEventName;
function isString(val) {
    return typeof val === 'string';
}
exports.isString = isString;
function isSymbol(val) {
    return typeof val === 'symbol';
}
exports.isSymbol = isSymbol;
function isFunction(val) {
    return typeof val === 'function';
}
exports.isFunction = isFunction;
function isPositiveNumber(val) {
    return typeof val === 'number' && val >= 0;
}
exports.isPositiveNumber = isPositiveNumber;
exports.isArray = Array.isArray;
/**
 * Finds the index of the listener for the event in its storage array.
 *
 * @param {Function[]} listeners Array of listeners to search through.
 * @param {Function} listener Method to look for.
 * @return {Number} Index of the specified listener, -1 if not found
 * @api private
 */
function indexOfListener(listeners, listener) {
    var i = listeners.length;
    while (i--) {
        if (listeners[i] && listeners[i].listener === listener) {
            return i;
        }
    }
    return -1;
}
exports.indexOfListener = indexOfListener;
function createListenerFunction(events, eventName, listener, once) {
    if (once === void 0) { once = false; }
    var listenerFunction = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (once) {
            events.removeListener(eventName, listener);
        }
        listener.apply(events, args);
    };
    listenerFunction.listener = listener;
    listenerFunction.once = once;
    return listenerFunction;
}
exports.createListenerFunction = createListenerFunction;
//# sourceMappingURL=utils.js.map